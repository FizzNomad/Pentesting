#!/bin/bash

# Functions
function check_dependency() {
    if ! command -v "$1" >/dev/null 2>&1; then
        echo "Warning: $1 not found. Skipping corresponding tests."
        return 1
    fi
}

function run_test() {
    local test_name="$1"
    local command_str="$2"
    local log_file="$3"
    read -p "Do you want to perform the $test_name test? (y/n): " choice
    case "$choice" in
        y|Y )
            echo "==========================================="
            echo "Starting $test_name"
            echo "==========================================="
            eval "$command_str | tee $log_file"
            echo "==========================================="
            echo "Finished $test_name"
            echo "==========================================="
            ;;
        n|N )
            echo "Skipping $test_name"
            ;;
        * )
            echo "Invalid choice. Skipping $test_name"
            ;;
    esac
}

# Check dependencies
check_dependency "sqlmap"
check_dependency "nosqlmap"
check_dependency "commix"
check_dependency "burp"
check_dependency "hydra"
check_dependency "xsser"
check_dependency "beef-xss"
check_dependency "dotdotpwn"
check_dependency "skipfish"
check_dependency "wafw00f"
check_dependency "nmap"
check_dependency "sslscan"
check_dependency "mitmproxy"
check_dependency "csrfploit"

# Check if user provided a single URL or a file containing a list of URLs
if [ -z "$1" ]; then
    read -p "Enter the target URL: " target_url
else
    if [ -f "$1" ]; then
        urls_file="$1"
    else
        echo "File not found. Please provide a valid file."
        exit 1
    fi
fi

# Injection Flaws
if check_dependency "sqlmap"; then
    run_test "SQL Injection test" "sqlmap -u \"$target_url\" --dbs" "sqlmap.log"
fi

if check_dependency "nosqlmap"; then
    run_test "NoSQL Injection test" "nosqlmap -u \"$target_url\"" "nosqlmap.log"
fi

if check_dependency "commix"; then
    run_test "OS Command Injection test" "commix -u \"$target_url\"" "commix.log"
fi

# Broken Authentication and Session Management
if check_dependency "burp"; then
    run_test "Session Management test" "burp -s cookie-name=cookie-value" "burp.log"
fi

if check_dependency "hydra"; then
    run_test "Password Cracking test" "hydra -l <username> -P <password_list> \"$target_url\" <service>" "hydra.log"
fi

# Cross-Site Scripting (XSS)
if check_dependency "xsser"; then
    run_test "Reflected XSS test" "xsser -u \"$target_url\"" "xsser.log"
fi

if check_dependency "beef-xss"; then
    run_test "Stored XSS test" "beef-xss" "beef-xss.log"
fi

# Insecure Direct Object References
if check_dependency "dotdotpwn"; then
    run_test "Insecure Direct Object References test" "dotdotpwn -u \"$target_url\"" "dotdotpwn.log"
fi

# Security Misconfiguration
if check_dependency "wafw00f"; then
    run_test "Web Application Fingerprinting test" "wafw00f \"$target_url\"" "wafw00f.log"
fi

if check_dependency "nmap"; then
    run_test "Server Fingerprinting test" "nmap -sV \"$target_url\"" "nmap.log"
fi

# Insecure Cryptographic Storage
if check_dependency "sslscan"; then
    run_test "SSL/TLS Testing" "sslscan \"$target_url\"" "sslscan.log"
fi

# Insufficient Transport Layer Protection
if check_dependency "sslscan"; then
    run_test "HTTPS Testing" "sslscan \"$target_url\"" "sslscan.log"
fi

if check_dependency "mitmproxy"; then
    run_test "MITM Proxy test" "mitmproxy" "mitmproxy.log"
fi

# Unvalidated and Unsanitized Input
if check_dependency "commix"; then
    run_test "Code Injection test" "commix -u \"$target_url\"" "commix.log"
fi

echo "All tests completed successfully."
exit 0

