import argparse
import os
import sys
import configparser
from datetime import datetime

def get_insecurity_reason(ciphersuite):
    reasons = []

    # Identify insecure key exchange algorithms
    if "DHE_DSS" in ciphersuite or "DH_DSS" in ciphersuite:
        reasons.append("Uses weak DSS key exchange")
    elif "DH_anon" in ciphersuite:
        reasons.append("Uses anonymous Diffie-Hellman key exchange, susceptible to MITM attacks")

    # Identify insecure encryption algorithms
    if "DES" in ciphersuite or "3DES" in ciphersuite:
        reasons.append("Uses weak DES or 3DES encryption")
    elif "RC4" in ciphersuite:
        reasons.append("Uses weak RC4 encryption")
    elif "NULL" in ciphersuite:
        reasons.append("No encryption used (NULL)")

    # Identify insecure message authentication algorithms
    if "MD5" in ciphersuite:
        reasons.append("Uses weak MD5 message authentication")
    elif "SHA" in ciphersuite and "SHA256" not in ciphersuite and "SHA384" not in ciphersuite:
        reasons.append("Uses weak SHA-1 message authentication")

    # If no specific reasons were found, return a general insecurity statement
    if not reasons:
        reasons.append("Insecure due to other reasons")

    return "; ".join(reasons)


def process_ciphersuite_file(input_file, output_file, allowed_ciphersuites=None, sort_output=False):
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(input_file, "r") as file:
        ciphersuites = file.readlines()

    ciphersuite_data = []
    for ciphersuite in ciphersuites:
        ciphersuite = ciphersuite.strip()
        if allowed_ciphersuites and not filter_allowed_ciphersuites(ciphersuite, allowed_ciphersuites):
            continue
        insecurity_reasons = get_insecurity_reason(ciphersuite)
        ciphersuite_data.append((ciphersuite, insecurity_reasons))
        print(f"{ciphersuite}: {insecurity_reasons}")

    if sort_output:
        ciphersuite_data = sort_by_insecurity_reasons(ciphersuite_data)

    with open(output_file, "w") as file:
        for ciphersuite, insecurity_reasons in ciphersuite_data:
            file.write(f"{ciphersuite}: {insecurity_reasons}\n")

def interactive_mode():
    print("Enter 'sort' before the ciphersuite to sort the output by insecurity reasons.")
    print("Enter 'exit' to quit the interactive mode.")
    while True:
        user_input = input("Enter a ciphersuite or 'sort' followed by a ciphersuite: ").strip()
        if user_input.lower() == "exit":
            break
        sort_output = False
        if user_input.lower().startswith("sort"):
            sort_output = True
            user_input = user_input[4:].strip()

        ciphersuite = user_input
        insecurity_reasons = get_insecurity_reason(ciphersuite)
        if sort_output:
            sorted_reasons = sorted(insecurity_reasons.split("; "), reverse=True)
            insecurity_reasons = "; ".join(sorted_reasons)

        print(f"{ciphersuite}: {insecurity_reasons}")

def filter_allowed_ciphersuites(ciphersuite, allowed_ciphersuites):
    return ciphersuite in allowed_ciphersuites

def sort_by_insecurity_reasons(ciphersuite_data):
    return sorted(ciphersuite_data, key=lambda x: x[1], reverse=True)

def main():
    parser = argparse.ArgumentParser(description="SSL/TLS Ciphersuite Security Analyzer")
    parser.add_argument("-i", "--input", help="Input file or directory containing ciphersuites, one per line")
    parser.add_argument("-o", "--output", help="Output file or directory to write security analysis results")
    parser.add_argument("-c", "--config", help="Configuration file to customize settings")
    parser.add_argument("-s", "--sort", action="store_true", help="Sort the output by insecurity reasons")

    args = parser.parse_args()

    if args.config:
        config = configparser.ConfigParser()
        config.read(args.config)
        input_files = config.get("input", "files").split(",") if config.has_option("input", "files") else []
        output_dir = config.get("output", "directory") if config.has_option("output", "directory") else ""
    else:
        input_files = []
        output_dir = ""

    if args.input:
        if os.path.isdir(args.input):
            input_files.extend([os.path.join(args.input, f) for f in os.listdir(args.input) if os.path.isfile(os.path.join(args.input, f))])
        else:
            input_files.append(args.input)

    if args.output:
        if os.path.isdir(args.output):
            output_dir = args.output
        else:
            output_file = args.output
    elif output_dir:
        output_file = os.path.join(output_dir, "output.txt")
    else:
        output_file = "output.txt"

    if input_files:
        for input_file in input_files:
            input_file = input_file.strip()
            output_file_path = os.path.join(output_dir, f"{os.path.splitext(os.path.basename(input_file))[0]}_output.txt")
            process_ciphersuite_file(input_file, output_file_path, sort_output=args.sort)
    else:
        interactive_mode()

if __name__ == "__main__":
    main()

