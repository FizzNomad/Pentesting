package main

import (
    "bufio"
    "fmt"
    "os"
    "os/exec"
    "regexp"
    "strconv"
    "strings"
)

func prompt(message string) string {
    fmt.Print(message)
    scanner := bufio.NewScanner(os.Stdin)
    scanner.Scan()
    return scanner.Text()
}

func runNmap() {
    target := prompt("Enter target IP or subnet range: ")
    clientname := prompt("Enter client name: ")
    scantype_option := prompt("Select scan type:\n1. SYN scan (-sS)\n2. Version scan (-sV)\n")
    scantype := ""
    switch scantype_option {
    case "1":
        scantype = "-sS"
    case "2":
        scantype = "-sV"
    default:
        fmt.Println("Invalid option")
        return
    }
    filename := clientname + "-" + strings.ReplaceAll(target, "/", "-") + scantype
    cmd := exec.Command("sudo", "nmap", scantype, "-p-", "--open", target, "-oA", filename, "-vvvvvv", "--stats-every", "5s")
    cmd.Stdout = os.Stdout
    cmd.Stderr = os.Stderr
    err := cmd.Run()
    if err != nil {
        fmt.Println("Error running NMAP:", err)
    } else {
        fmt.Println("Scan complete! Results saved to", filename)
    }
}

func digGoogle() {
    cmd := exec.Command("dig", "google.com")
    cmd.Stdout = os.Stdout
    cmd.Stderr = os.Stderr
    err := cmd.Run()
    if err != nil {
        fmt.Println("Error running dig:", err)
    } else {
        save := prompt("Do you want to save the results to a file? (y/n) ")
        if save == "y" {
            filename := prompt("Enter filename: ")
            file, err := os.Create(filename)
            if err != nil {
                fmt.Println("Error creating file:", err)
            } else {
                defer file.Close()
                cmd.Stdout = file
                cmd.Run()
                fmt.Println("Results saved to", filename)
            }
        }
    }
}

func makeMentalNote() {
    if _, err := os.Stat("mental_notes"); os.IsNotExist(err) {
        err = os.Mkdir("mental_notes", 0755)
        if err != nil {
            fmt.Println("Error creating mental_notes directory:", err)
            return
        }
    }
    noteCount := 0
    files, err := os.ReadDir("mental_notes")
    if err == nil {
        r := regexp.MustCompile(`^mental_note-(\d{3})\.txt$`)
        for _, f := range files {
            match := r.FindStringSubmatch(f.Name())
            if len(match) > 0 {
                n, err := strconv.Atoi(match[1])
                if err == nil && n > noteCount {
                    noteCount = n
                }
            }
        }
    }
    noteCount++
    noteName := fmt.Sprintf("mental_note-%03d.txt", noteCount)
    noteFile, err := os.Create("mental_notes/" + noteName)
    if err != nil {
        fmt.Println("Error creating note file:", err)
        return
    }
    defer noteFile.Close()
    fmt.Println("Type your mental note (press Ctrl+D to finish):")
    scanner := bufio.NewScanner(os.Stdin)
    scanner.Scan()
    for scanner.Scan() {
        noteFile.WriteString(scanner.Text() + "\n")
    }
    fmt.Println("Note saved
